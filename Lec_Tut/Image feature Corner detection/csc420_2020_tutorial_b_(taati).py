# -*- coding: utf-8 -*-
"""CSC420_2020_Tutorial_B (Taati).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BzzchgG3GxOO4ZRKlPCZHPvZiMsINnn7
"""

# Load the Drive helper and mount
from google.colab import drive

# This will prompt for authorization.
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# install OpenCV
!pip install opencv-python

# the usual ...
# %matplotlib inline
import matplotlib.pyplot as plt
import cv2
import numpy as np

# read an image (make sure CavePainting.jpg is in the main folder in your Google Drive)
#img = cv2.imread('/content/drive/My Drive/Corners.jpg') # READS IN NUMPY ARRAY
#img = cv2.imread('/content/drive/My Drive/Window2.jpg') # READS IN NUMPY ARRAY
img = cv2.imread('/content/drive/My Drive/Corners2.png') # READS IN NUMPY ARRAY

img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

plt.imshow(img)

gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
#gray = cv2.bitwise_not(gray)
gray = gray*1.1
plt.imshow(gray, cmap='gray')
blur = cv2.GaussianBlur(gray,(5,5),7)
Ix = cv2.Sobel(blur, cv2.CV_64F, 1, 0, ksize=5)
Iy = cv2.Sobel(blur, cv2.CV_64F, 0, 1, ksize=5)

plt.subplot(2,1,1), plt.imshow(Ix,cmap = 'gray')
plt.subplot(2,1,2), plt.imshow(Iy,cmap = 'gray')

# don't do it this way!
cx = np.zeros(img.shape, np.uint8)
cy = np.zeros(img.shape, np.uint8)

cx[abs(Ix)>4312] = [255, 100, 120] # try thresholds of 4311 and 4312 (for Corners2.png)
cy[abs(Iy)>4312] = [255, 100, 120]
c = cv2.bitwise_and(cx, cy)
c = cv2.dilate(c, None, iterations = 3)

plt.imshow(c)

# do it this way
IxIy = np.multiply(Ix, Iy)
Ix2 = np.multiply(Ix, Ix)
Iy2 = np.multiply(Iy, Iy)

Ix2_blur = cv2.GaussianBlur(Ix2,(7,7),10) 
Iy2_blur = cv2.GaussianBlur(Iy2,(7,7),10) 
IxIy_blur = cv2.GaussianBlur(IxIy,(7,7),10)

plt.subplot(1,3,1), plt.imshow(Ix2_blur,cmap = 'gray')
plt.subplot(1,3,2), plt.imshow(Iy2_blur,cmap = 'gray')
plt.subplot(1,3,3), plt.imshow(IxIy_blur,cmap = 'gray')

det = np.multiply(Ix2_blur, Iy2_blur) - np.multiply(IxIy_blur,IxIy_blur)
trace = Ix2_blur + Iy2_blur

plt.subplot(1,2,1), plt.imshow(det,cmap = 'gray')
plt.subplot(1,2,2), plt.imshow(trace,cmap = 'gray')

R = det - 0.05 * np.multiply(trace,trace)
plt.subplot(1,2,1), plt.imshow(img), plt.axis('off')
plt.subplot(1,2,2), plt.imshow(R,cmap = 'gray'), plt.axis('off')

# show the original image, 
img2 = img.copy()
img2[R > 0.05 * R.max()]=[255, 255, 0] 
plt.imshow(img2)

# See also:
#    cornerHarris
#    cornerEigenValsAndVecs
#    cornerSubPix
#    goodFeaturesToTrack   # finds N strongest corners in the image by Shi-Tomasi method or Harris Corner Detection (list of image points instead of image)

# using cornerHarris
corners = cv2.cornerHarris(np.float32(gray),3,3,0.05)
plt.imshow(corners, cmap = 'gray')

# dilate the corners 
corners = cv2.dilate(corners, None, iterations = 3) 
  
# show the original image, 
img3 = img.copy()
img3[corners > 0.05 * corners.max()]=[255, 100, 100] 
plt.imshow(img3)